import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import PageTransition from '../components/PageTransition';
import { Button } from '../components/ui/Button';
import redditLogoFile from '../assets/reddit.svg';
import xLogoFile from '../assets/X_logo_2023_original.svg';
import telegramLogoFile from '../assets/telegram.svg';
import instagramLogoFile from '../assets/instagram.svg';
import coindeskLogo from '../assets/coindesk.png';
import forklogLogo from '../assets/forklog.png';
import rbcLogo from '../assets/rbc.png';
// import { GlobeAltIcon, ArrowTopRightOnSquareIcon, InformationCircleIcon } from '@heroicons/react/24/outline'; // –û—Å—Ç–∞–≤–ª—è–µ–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –Ω—É–∂–Ω–∞

const communityContent = {
  ru: {
    pageTitle: "–ö–æ–º—å—é–Ω–∏—Ç–∏ AHT",
    headerMainTitle: "–ñ–ò–í–û–ô –£–ì–û–õ–û–ö AHT",
    headerDescription: "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏, –æ—Ç—á–µ—Ç–∞–º–∏ –∏ —É—Å–ø–µ—Ö–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞. –í–∞—à–∞ –¥–æ–±—Ä–æ—Ç–∞ –º–µ–Ω—è–µ—Ç –∂–∏–∑–Ω–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö ‚Äî —É–±–µ–¥–∏—Ç–µ—Å—å —Å–∞–º–∏.",
    viewUpdatesButton: "–°–º–æ—Ç—Ä–µ—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ‚Üí",

    projectNewsTitle: "üì¢ –ú—ã –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö",
    joinConversationText: "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—é",
    communityArticles: [ 
      { title: "Animal Helper Token: –ö–∞–∫ –∫—Ä–∏–ø—Ç–∞ —Å–ø–∞—Å–∞–µ—Ç –∂–∏–≤–æ—Ç–Ω—ã—Ö", link: "#" },
      { title: "–¢–û–ü-5 –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ 2024", link: "#" }
    ],
    readFullArticleButton: "–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é",
    projectUpdateExample: "–ù–µ–¥–∞–≤–Ω–æ –º—ã –¥–æ–±–∞–≤–∏–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∏—é—Ç–æ–≤ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –∏ –≤–∏–¥—É –ø–æ–º–æ—â–∏!",
    updateHistoryButton: "–ò—Å—Ç–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π ‚Üí",
    
    shelterReportsTitle: "üêæ –û—Ç—á–µ—Ç—ã –æ—Ç –ø—Ä–∏—é—Ç–æ–≤",
    factsAndFiguresTitle: "üìä –¶–∏—Ñ—Ä—ã –∏ —Ñ–∞–∫—Ç—ã",
    shelterReportExamples: [
      { title: "–ö–∞–∫ –ø—Ä–æ—à–ª–∞ —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è –∫–æ—à–µ–∫ –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ", type: "video", link: "#" },
      { title: "–ù–æ–≤—ã–π –≤–æ–ª—å–µ—Ä –¥–ª—è —Å–æ–±–∞–∫ –≤ –ö–∞–∑–∞–Ω–∏", type: "photo", link: "#" }
    ],
    interactiveMapText: "–¢–æ—á–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–µ —Å –æ—Ç–º–µ—Ç–∫–∞–º–∏ –ø—Ä–∏—é—Ç–æ–≤, –∫—É–¥–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã —Å—Ä–µ–¥—Å—Ç–≤–∞. –ù–∞–∂–∞—Ç–∏–µ ‚Äî –¥–µ—Ç–∞–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–∞.",
    stats: {
      animalsTreated: "200 –∂–∏–≤–æ—Ç–Ω—ã—Ö –ø–æ–ª—É—á–∏–ª–∏ –ª–µ—á–µ–Ω–∏–µ",
      sheltersSupported: "50 –ø—Ä–∏—é—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–æ",
      foodPurchased: "10000 –∫–≥ –∫–æ—Ä–º–∞ –∑–∞–∫—É–ø–ª–µ–Ω–æ"
    },
    viewAllReportsButton: "–°–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –æ—Ç—á–µ—Ç—ã ‚Üí",

    mediaMentionsTitle: "üóûÔ∏è –°—Ç–∞—Ç—å–∏ –æ –Ω–∞—Å",
    mediaQuotes: [
      { source: "Coindesk", quote: "Animal Helper Token ‚Äî –ø—Ä–∏–º–µ—Ä, –∫–∞–∫ –±–ª–æ–∫—á–µ–π–Ω –º–æ–∂–µ—Ç —Ä–µ—à–∞—Ç—å —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏.", logo: "coindesk.png" },
      { source: "Forklog", quote: "–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ –±–∞–∑–µ TON.", logo: "forklog.png" },
      { source: "–†–ë–ö –ö—Ä–∏–ø—Ç–∞", quote: "AHT –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª Web3 –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –±–ª–∞–≥–∞.", logo: "rbc.png" }
    ],

    communityParticipationTitle: "ü§ù –°—Ç–∞–Ω—å—Ç–µ —á–∞—Å—Ç—å—é –∏–∑–º–µ–Ω–µ–Ω–∏–π",
    votingTitle: "–ö–∞–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ 20% —Å—Ä–µ–¥—Å—Ç–≤? –ì–æ–ª–æ—Å—É–π—Ç–µ –∑–∞ –ø—Ä–∏—é—Ç—ã –∏–ª–∏ –≤–µ—Ç–∫–ª–∏–Ω–∏–∫–∏.",
    userStoryExample: "–ü–æ–∫—É–ø–∞—é AHT –µ–∂–µ–º–µ—Å—è—á–Ω–æ ‚Äî –∑–Ω–∞—é, —á—Ç–æ –ø–æ–º–æ–≥–∞—é –∂–∏–≤–æ—Ç–Ω—ã–º –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ä—É—é –≤ –±—É–¥—É—â–µ–µ.",
    forumDiscussionText: "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—é –∏–¥–µ–π –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –≤ –Ω–∞—à–µ–º —á–∞—Ç–µ.",
    participateInVotingButton: "–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏ ‚Üí",
    goToChatButton: "–ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç",

    finalCtaTitle: "üí¨ –î–µ–ª–∏—Ç–µ—Å—å –∏—Å—Ç–æ—Ä–∏–µ–π Animal Helper Token!",
    finalCtaDescription: "–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã, –¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–≤–æ—Å—Ç—è–º–∏, —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏—è—Ö. –ß–µ–º –±–æ–ª—å—à–µ –ª—é–¥–µ–π –∑–Ω–∞–µ—Ç –æ –ø—Ä–æ–µ–∫—Ç–µ ‚Äî —Ç–µ–º –±–æ–ª—å—à–µ –ø–æ–º–æ—â–∏ –ø–æ–ª—É—á–∞—Ç –∂–∏–≤–æ—Ç–Ω—ã–µ.",
    shareInSocialMediaButton: "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è",
    toggleToEnglish: "Switch to English",
    toggleToRussian: "–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ –†—É—Å—Å–∫–∏–π",
    projectsToHelpButton: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è –ø–æ–º–æ—â–∏"
  },
  en: {
    pageTitle: "AHT Community",
    headerMainTitle: "AHT LIVE CORNER",
    headerDescription: "Follow project news, reports, and successes. Your kindness changes animals' lives ‚Äî see for yourself.",
    viewUpdatesButton: "View Updates ‚Üí",

    projectNewsTitle: "üì¢ We are on social media",
    joinConversationText: "Join the conversation",
    communityArticles: [
      { title: "Animal Helper Token: How Crypto Saves Animals", link: "#" },
      { title: "TOP 5 Charity Tokens of 2024", link: "#" }
    ],
    readFullArticleButton: "Read Full Article",
    projectUpdateExample: "We recently added the ability to filter shelters by region and type of assistance!",
    updateHistoryButton: "Update History ‚Üí",
    
    shelterReportsTitle: "üêæ Shelter Reports",
    factsAndFiguresTitle: "üìä Facts and Figures",
    shelterReportExamples: [
      { title: "Cat Sterilization in Saint Petersburg: How It Went", type: "video", link: "#" },
      { title: "New Dog Enclosure in Kazan", type: "photo", link: "#" }
    ],
    interactiveMapText: "Points on the map with shelter locations where funds have been directed. Click for transfer details.",
    stats: {
      animalsTreated: "200 animals received treatment",
      sheltersSupported: "50 shelters supported",
      foodPurchased: "10,000 kg of food purchased"
    },
    viewAllReportsButton: "View All Reports ‚Üí",

    mediaMentionsTitle: "üóûÔ∏è Articles About Us",
    mediaQuotes: [
      { source: "Coindesk", quote: "Animal Helper Token is an example of how blockchain can solve social problems.", logo: "coindesk.png" },
      { source: "Forklog", quote: "An innovative approach to charity based on TON.", logo: "forklog.png" },
      { source: "RBC Crypto", quote: "AHT demonstrates the potential of Web3 for social good.", logo: "rbc.png" }
    ],

    communityParticipationTitle: "ü§ù Become Part of the Change",
    votingTitle: "How should the next 20% of funds be allocated? Vote for shelters or vet clinics.",
    userStoryExample: "I buy AHT monthly ‚Äî I know I'm helping animals and investing in the future.",
    forumDiscussionText: "Join the discussion of project development ideas in our chat.",
    participateInVotingButton: "Participate in Voting ‚Üí",
    goToChatButton: "Go to Chat",

    finalCtaTitle: "üí¨ Share the Animal Helper Token Story!",
    finalCtaDescription: "Subscribe to channels, share news, participate in discussions. The more people know about the project, the more help animals will receive.",
    shareInSocialMediaButton: "Share",
    toggleToEnglish: "Switch to English",
    toggleToRussian: "Switch to Russian",
    projectsToHelpButton: "View Projects to Help"
  }
};

const Community = () => {
  const navigate = useNavigate();
  const [language, setLanguage] = useState<'ru' | 'en'>('ru');
  const content = communityContent[language];

  const logoImageMap: { [key: string]: string } = {
    'coindesk.png': coindeskLogo,
    'forklog.png': forklogLogo,
    'rbc.png': rbcLogo,
  };

  const commonButtonClassName = "text-green-400 border-green-400 hover:bg-green-500 hover:text-white";

  const toggleLanguage = () => {
    setLanguage(prevLang => prevLang === 'ru' ? 'en' : 'ru');
  };

  const handleNavigate = (path: string) => {
    if (path.startsWith('http')) {
      window.open(path, '_blank', 'noopener,noreferrer');
    } else {
      navigate(path);
    }
  };
  
  const handleKeyDown = (event: React.KeyboardEvent, action: () => void) => {
    if (event.key === 'Enter' || event.key === ' ') {
      action();
    }
  };

  return (
    <PageTransition>
      <div
        className="min-h-screen w-full text-slate-50 relative overflow-hidden p-3"
        style={{
          backgroundImage: 'radial-gradient(ellipse farthest-corner at 15% 25%, hsla(80, 99%, 54%, 0.2) 0%, transparent 70%), radial-gradient(ellipse farthest-corner at 80% 45%, hsla(323, 100%, 59%, 0.2) 0%, transparent 70%), radial-gradient(ellipse farthest-corner at 20% 75%, hsla(227, 78%, 42%, 0.2) 0%, transparent 70%), radial-gradient(ellipse farthest-corner at 70% 15%, hsla(268, 85%, 54%, 0.15) 0%, transparent 70%), radial-gradient(ellipse at center, hsla(323, 100%, 59%, 0.12) 0%, transparent 65%)',
          backgroundColor: '#1E172B'
        }}
      >
        <Button 
            onClick={toggleLanguage} 
            variant="outline"
            className="absolute top-0 left-0 z-20 border-slate-400/0 hover:border-slate-300 text-white text-2xl"
            aria-label={language === 'ru' ? content.toggleToEnglish : content.toggleToRussian}
        >
            {language === 'ru' ? 'EN' : 'RU'}
        </Button>

        <div className="w-full px-1 py-1 relative z-10">
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ (–ø–µ—Ä–≤—ã–π —ç–∫—Ä–∞–Ω) */}
          <header className="mb-1 text-right py-5 relative">
            <div className="relative text-right mt-14">
              <h1 className="relative z-10 text-6xl md:text-7xl font-semibold text-right mb-16 text-green-400">
                {(() => {
                  const words = content.headerMainTitle.split(' ');
                  if (words.length === 3) {
                    return (
                      <>
                       <span className="absolute top-2/3 left-1/2 -translate-x-1/4 -translate-y-1/2 z-0 opacity-20 text-4xl sm:text-35xl pointer-events-none">üôè</span>
                        <div className="leading-none mb-[-1px] font-actay-wide">{words[0]}</div>
                        <div className="leading-none mb-[-1px] font-actay-wide">{words[1]}</div>
                        <div className="leading-none mb-[-15px] font-actay-wide">{words[2]}</div>
                      </>
                    );
                  }
                  return content.headerMainTitle.split(' ').map((word, index, arr) => (
                    <div key={index} className={`leading-none ${index < arr.length - 1 ? "mb-[-5px]" : ""} font-actay-wide`}>
                      {word}
                    </div>
                  ));
                })()}
              </h1>
            </div>
            <p className="text-2xl text-slate-200 mb-[-30px] text-center">
              {content.headerDescription}
            </p>
          </header>

          {/* –ë–ª–æ–∫ 1: –ú—ã –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö */}
          <section className="my-16 py-8">
            <div className="relative text-left mb-10">
             
              <h2 className="relative z-10 text-3xl sm:text-4xl font-semibold text-green-400 font-actay-wide">
                {content.projectNewsTitle.substring(2)}
              </h2>
              
            </div>
            
            <div className="flex justify-center space-x-2 mb-20">
              <button 
                onClick={() => handleNavigate('https://t.me/yourchannel')} 
                aria-label="Telegram" 
                className="text-slate-300 hover:text-green-400 transition-colors duration-200 focus:outline-none"
              >
                <img src={telegramLogoFile} alt="Telegram Logo" className="w-14 h-14" />
              </button>
              <button 
                onClick={() => handleNavigate('https://instagram.com/yourprofile')} 
                aria-label="Instagram" 
                className="text-slate-300 hover:text-green-400 transition-colors duration-200 focus:outline-none"
              >
                <img src={instagramLogoFile} alt="Instagram Logo" className="w-14 h-14" />
              </button>
              <button 
                onClick={() => handleNavigate('https://twitter.com/yourhandle')} 
                aria-label="X (Twitter)" 
                className="text-slate-300 hover:text-green-400 transition-colors duration-200 focus:outline-none"
              >
                <img src={xLogoFile} alt="X Logo" className="w-14 h-14" />
              </button>
              <button 
                onClick={() => handleNavigate('#reddit-link')} 
                aria-label="Reddit" 
                className="text-slate-300 hover:text-green-400 transition-colors duration-200 focus:outline-none"
              >
                <img src={redditLogoFile} alt="Reddit Logo" className="w-14 h-14" />
              </button>
              
            </div>
          </section>

          {/* –ë–ª–æ–∫ 2: –û—Ç—á–µ—Ç—ã –æ—Ç –ø—Ä–∏—é—Ç–æ–≤ */}
          <section className="my-[-60px] py-[-60px]">
            <div className="relative text-left mb-10">
                            <h2 className="relative z-10 text-4xl font-semibold text-green-400 font-actay-wide">
                {content.shelterReportsTitle.substring(2)}
              </h2>
              <div className="flex flex-row flex-wrap justify-center gap-10 lg:gap-20">
                {content.shelterReportExamples.map((report, index) => (
                  <div key={index} className="max-w-xs bg-slate-800/0 p-2 rounded-lg hover:bg-slate-700/0 transition-colors duration-300 flex flex-col">
                    <div className="aspect-video bg-slate-700/60 rounded-md mb-3 flex items-center justify-center text-slate-50 text-4xl">
                      {report.type === 'video' ? 'üé¨' : 'üì∏'}
                      
                    </div>
                    <h4 className="text-xl font-light text-slate-50 truncate mt-auto" title={report.title}>{report.title}</h4>
                  </div>
                ))}
              </div>
            </div>

            <div className="relative text-right mb-1">
            <span className="absolute top-1/2 left-1/2 -translate-x-1/3 -translate-y-1/2 z-0 opacity-20 text-4xl sm:text-30xl pointer-events-none">üê¶‚Äçüî•
              </span>

              <h3 className="relative z-10 text-4xl text-slate-100 font-actay-wide">
                {content.factsAndFiguresTitle.substring(2)}
              </h3>
            </div>
            <div className="flex flex-row flex-wrap justify-center gap-6 mb-10">
              {Object.entries(content.stats).map(([key, value]) => (
                <div key={key} className="bg-slate-800/0 p-3 rounded-lg text-center w-full">
                  <p className="text-3xl sm:text-4xl font-bold text-green-400 mb-2">{value.split(' ')[0]}</p>
                  <p className="text-slate-50 text-xl">{value.substring(value.indexOf(' ') + 1)}</p>
                </div>
              ))}
            </div>
            <div className="flex justify-center">
              <Button
                variant="outline"
                size="md"
                onClick={() => handleNavigate('/community')}
                onKeyDown={(e) => handleKeyDown(e, () => handleNavigate('/community'))}
                aria-label={content.viewAllReportsButton}
              className={`${commonButtonClassName} text-xl`}
              >
                {content.viewAllReportsButton}
              </Button>
            </div>
          </section>

          {/* –ë–ª–æ–∫ 3: –°–ú–ò –æ –Ω–∞—Å */}
          <section className="my-40 py-1">
            <div className="relative text-left mb-12">
              <span className="absolute top-1/4 left-1/4 -translate-x-1/2 -translate-y-1/2 z-0 opacity-10 text-4xl sm:text-30xl pointer-events-none">üì∞
              </span>
              <h2 className="relative z-10 text-4xl font-semibold text-green-400 font-actay-wide">
                {content.mediaMentionsTitle.substring(2)}
              </h2>
            </div>
            <div className="flex flex-row flex-wrap justify-center gap-8 lg:gap-12 mb-12">
              {content.mediaQuotes.map((media, index) => (
                <div key={index} className="flex flex-col items-center text-center bg-slate-800/0 p- rounded-lg w-full">
                  <img 
                    src={logoImageMap[media.logo]} 
                    alt={`${media.source} logo`} 
                    className="h-14 object-contain mb-1"
                  />
                  <blockquote className="text-slate-200 italic text-lg mb-4 flex-grow">¬´{media.quote}¬ª</blockquote>
                  
                </div>
                
              ))}
            </div>
          </section>

          {/* –ë–ª–æ–∫ 4: –°–æ–æ–±—â–µ—Å—Ç–≤–æ –∏ —É—á–∞—Å—Ç–∏–µ */}
          <section className="my-2 py-1">
            <div className="relative text-right mb-4 mt-[-150px]">
              <span className="absolute top-1/2 left-1/2 -translate-x-1/5 -translate-y-1/3 z-0 opacity-20 text-4xl sm:text-15xl pointer-events-none">üõ†Ô∏è
              </span>
              <h2 className="relative z-10 text-3xl sm:text-4xl font-semibold text-green-400 font-actay-wide">
                {content.communityParticipationTitle.substring(2)}
              </h2>
            </div>
            <div className="flex flex-row flex-wrap items-stretch justify-center gap-8 mb-12">
              <div className="bg-slate-800/0 p-6 rounded-lg w-full flex flex-col">
                <h3 className="text-2xl font-medium mb-4 text-slate-100 font-actay-wide text-center">–ñ–∞–ª–æ–±—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</h3>
                <p className="text-slate-50 mb-8 text-xl text-center flex-grow">{content.forumDiscussionText}</p>
                <Button
                  variant="outline"
                  size="lg"
                  onClick={() => handleNavigate('https://t.me/your_chat_link')}
                  onKeyDown={(e) => handleKeyDown(e, () => handleNavigate('https://t.me/your_chat_link'))}
                  className={`${commonButtonClassName} text-lg mt-4 `}
                >
                  {content.goToChatButton}
                </Button>
              </div>
            </div>
          </section>

          {/* –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é */}
          <section className="my-16 py-12 text-center">
            <div className="relative text-left mb-10 mt-[-60px]">
              <h2 className="relative z-10 text-4xl font-semibold text-green-100 font-actay-wide">
                {content.finalCtaTitle.substring(2)}
              </h2>
             
            </div>
            <p className="text-xl text-slate-50 mb-10 ">
              {content.finalCtaDescription}
              
            </p>
            <Button
              variant="outline"
              size="lg"
              onClick={() => {/* TODO: Define share action */}}
              onKeyDown={(e) => handleKeyDown(e, () => {/* TODO: Define share action */})}
              aria-label={content.shareInSocialMediaButton}
              className={`${commonButtonClassName} text-lg mt-4`}
            >
              {content.shareInSocialMediaButton}
              
            </Button>
            
          </section>

          {/* –ë–ª–æ–∫ "–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞" */}
          <section className="my-16 py-8 text-center mt-[-50px]">
            
            <h3 className="text-2xl sm:text-4xl text-right font-medium mb-14 text-slate-100 font-actay-wide">–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
              
            </h3>
            <div className="relative p-6 rounded-lg bg-slate-800/0 mb-8">
            <span className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 z-0 opacity-20 text-4xl sm:text-30xl pointer-events-none">‚ù§Ô∏è‚Äçüî•
            </span>
            
              <p className="text-slate-50 text-lg">{content.projectUpdateExample}</p>
              
            </div>
            <Button
              variant="outline"
              size="lg"
              onClick={() => handleNavigate('/update-history')}
              onKeyDown={(e) => handleKeyDown(e, () => handleNavigate('/update-history'))}
              aria-label={content.updateHistoryButton}
              className={`${commonButtonClassName} text-lg mt-4 py-2 px-4`}
            >
              {content.updateHistoryButton}
            </Button>
          </section>
        </div>
      </div>
    </PageTransition>
  );
};

export default Community; 